// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: app_helper_pb.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.google.android.horologist.data;

@kotlin.jvm.JvmName("-initializesurfacesInfo")
public inline fun surfacesInfo(block: com.google.android.horologist.data.SurfacesInfoKt.Dsl.() -> kotlin.Unit): com.google.android.horologist.data.SurfacesInfo =
  com.google.android.horologist.data.SurfacesInfoKt.Dsl._create(com.google.android.horologist.data.SurfacesInfo.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `com.google.android.horologist.data.SurfacesInfo`
 */
public object SurfacesInfoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.google.android.horologist.data.SurfacesInfo.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.google.android.horologist.data.SurfacesInfo.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.google.android.horologist.data.SurfacesInfo = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ComplicationsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated .com.google.android.horologist.data.ComplicationInfo complications = 2;`
     */
     public val complications: com.google.protobuf.kotlin.DslList<com.google.android.horologist.data.ComplicationInfo, ComplicationsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.complicationsList
      )
    /**
     * `repeated .com.google.android.horologist.data.ComplicationInfo complications = 2;`
     * @param value The complications to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addComplications")
    public fun com.google.protobuf.kotlin.DslList<com.google.android.horologist.data.ComplicationInfo, ComplicationsProxy>.add(value: com.google.android.horologist.data.ComplicationInfo) {
      _builder.addComplications(value)
    }
    /**
     * `repeated .com.google.android.horologist.data.ComplicationInfo complications = 2;`
     * @param value The complications to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignComplications")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.google.android.horologist.data.ComplicationInfo, ComplicationsProxy>.plusAssign(value: com.google.android.horologist.data.ComplicationInfo) {
      add(value)
    }
    /**
     * `repeated .com.google.android.horologist.data.ComplicationInfo complications = 2;`
     * @param values The complications to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllComplications")
    public fun com.google.protobuf.kotlin.DslList<com.google.android.horologist.data.ComplicationInfo, ComplicationsProxy>.addAll(values: kotlin.collections.Iterable<com.google.android.horologist.data.ComplicationInfo>) {
      _builder.addAllComplications(values)
    }
    /**
     * `repeated .com.google.android.horologist.data.ComplicationInfo complications = 2;`
     * @param values The complications to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllComplications")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.google.android.horologist.data.ComplicationInfo, ComplicationsProxy>.plusAssign(values: kotlin.collections.Iterable<com.google.android.horologist.data.ComplicationInfo>) {
      addAll(values)
    }
    /**
     * `repeated .com.google.android.horologist.data.ComplicationInfo complications = 2;`
     * @param index The index to set the value at.
     * @param value The complications to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setComplications")
    public operator fun com.google.protobuf.kotlin.DslList<com.google.android.horologist.data.ComplicationInfo, ComplicationsProxy>.set(index: kotlin.Int, value: com.google.android.horologist.data.ComplicationInfo) {
      _builder.setComplications(index, value)
    }
    /**
     * `repeated .com.google.android.horologist.data.ComplicationInfo complications = 2;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearComplications")
    public fun com.google.protobuf.kotlin.DslList<com.google.android.horologist.data.ComplicationInfo, ComplicationsProxy>.clear() {
      _builder.clearComplications()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class TilesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated .com.google.android.horologist.data.TileInfo tiles = 3;`
     */
     public val tiles: com.google.protobuf.kotlin.DslList<com.google.android.horologist.data.TileInfo, TilesProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.tilesList
      )
    /**
     * `repeated .com.google.android.horologist.data.TileInfo tiles = 3;`
     * @param value The tiles to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addTiles")
    public fun com.google.protobuf.kotlin.DslList<com.google.android.horologist.data.TileInfo, TilesProxy>.add(value: com.google.android.horologist.data.TileInfo) {
      _builder.addTiles(value)
    }
    /**
     * `repeated .com.google.android.horologist.data.TileInfo tiles = 3;`
     * @param value The tiles to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignTiles")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.google.android.horologist.data.TileInfo, TilesProxy>.plusAssign(value: com.google.android.horologist.data.TileInfo) {
      add(value)
    }
    /**
     * `repeated .com.google.android.horologist.data.TileInfo tiles = 3;`
     * @param values The tiles to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllTiles")
    public fun com.google.protobuf.kotlin.DslList<com.google.android.horologist.data.TileInfo, TilesProxy>.addAll(values: kotlin.collections.Iterable<com.google.android.horologist.data.TileInfo>) {
      _builder.addAllTiles(values)
    }
    /**
     * `repeated .com.google.android.horologist.data.TileInfo tiles = 3;`
     * @param values The tiles to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllTiles")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.google.android.horologist.data.TileInfo, TilesProxy>.plusAssign(values: kotlin.collections.Iterable<com.google.android.horologist.data.TileInfo>) {
      addAll(values)
    }
    /**
     * `repeated .com.google.android.horologist.data.TileInfo tiles = 3;`
     * @param index The index to set the value at.
     * @param value The tiles to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setTiles")
    public operator fun com.google.protobuf.kotlin.DslList<com.google.android.horologist.data.TileInfo, TilesProxy>.set(index: kotlin.Int, value: com.google.android.horologist.data.TileInfo) {
      _builder.setTiles(index, value)
    }
    /**
     * `repeated .com.google.android.horologist.data.TileInfo tiles = 3;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearTiles")
    public fun com.google.protobuf.kotlin.DslList<com.google.android.horologist.data.TileInfo, TilesProxy>.clear() {
      _builder.clearTiles()
    }

    /**
     * ```
     * Temporarily keep [ActivityLaunched] - remove at a later date
     * ```
     *
     * `.com.google.android.horologist.data.ActivityLaunched activityLaunched = 4;`
     */
    public var activityLaunched: com.google.android.horologist.data.ActivityLaunched
      @JvmName("getActivityLaunched")
      get() = _builder.activityLaunched
      @JvmName("setActivityLaunched")
      set(value) {
        _builder.activityLaunched = value
      }
    /**
     * ```
     * Temporarily keep [ActivityLaunched] - remove at a later date
     * ```
     *
     * `.com.google.android.horologist.data.ActivityLaunched activityLaunched = 4;`
     */
    public fun clearActivityLaunched() {
      _builder.clearActivityLaunched()
    }
    /**
     * ```
     * Temporarily keep [ActivityLaunched] - remove at a later date
     * ```
     *
     * `.com.google.android.horologist.data.ActivityLaunched activityLaunched = 4;`
     * @return Whether the activityLaunched field is set.
     */
    public fun hasActivityLaunched(): kotlin.Boolean {
      return _builder.hasActivityLaunched()
    }
    public val SurfacesInfoKt.Dsl.activityLaunchedOrNull: com.google.android.horologist.data.ActivityLaunched?
      get() = _builder.activityLaunchedOrNull

    /**
     * `.com.google.android.horologist.data.UsageInfo usageInfo = 5;`
     */
    public var usageInfo: com.google.android.horologist.data.UsageInfo
      @JvmName("getUsageInfo")
      get() = _builder.usageInfo
      @JvmName("setUsageInfo")
      set(value) {
        _builder.usageInfo = value
      }
    /**
     * `.com.google.android.horologist.data.UsageInfo usageInfo = 5;`
     */
    public fun clearUsageInfo() {
      _builder.clearUsageInfo()
    }
    /**
     * `.com.google.android.horologist.data.UsageInfo usageInfo = 5;`
     * @return Whether the usageInfo field is set.
     */
    public fun hasUsageInfo(): kotlin.Boolean {
      return _builder.hasUsageInfo()
    }
    public val SurfacesInfoKt.Dsl.usageInfoOrNull: com.google.android.horologist.data.UsageInfo?
      get() = _builder.usageInfoOrNull
  }
}
public inline fun com.google.android.horologist.data.SurfacesInfo.copy(block: `com.google.android.horologist.data`.SurfacesInfoKt.Dsl.() -> kotlin.Unit): com.google.android.horologist.data.SurfacesInfo =
  `com.google.android.horologist.data`.SurfacesInfoKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.google.android.horologist.data.SurfacesInfoOrBuilder.activityLaunchedOrNull: com.google.android.horologist.data.ActivityLaunched?
  get() = if (hasActivityLaunched()) getActivityLaunched() else null

public val com.google.android.horologist.data.SurfacesInfoOrBuilder.usageInfoOrNull: com.google.android.horologist.data.UsageInfo?
  get() = if (hasUsageInfo()) getUsageInfo() else null

