// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: app_helper_pb.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.google.android.horologist.data;

@kotlin.jvm.JvmName("-initializelaunchRequest")
public inline fun launchRequest(block: com.google.android.horologist.data.LaunchRequestKt.Dsl.() -> kotlin.Unit): com.google.android.horologist.data.LaunchRequest =
  com.google.android.horologist.data.LaunchRequestKt.Dsl._create(com.google.android.horologist.data.LaunchRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `com.google.android.horologist.data.LaunchRequest`
 */
public object LaunchRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.google.android.horologist.data.LaunchRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.google.android.horologist.data.LaunchRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.google.android.horologist.data.LaunchRequest = _builder.build()

    /**
     * `.com.google.android.horologist.data.OwnAppConfig own_app = 1;`
     */
    public var ownApp: com.google.android.horologist.data.OwnAppConfig
      @JvmName("getOwnApp")
      get() = _builder.ownApp
      @JvmName("setOwnApp")
      set(value) {
        _builder.ownApp = value
      }
    /**
     * `.com.google.android.horologist.data.OwnAppConfig own_app = 1;`
     */
    public fun clearOwnApp() {
      _builder.clearOwnApp()
    }
    /**
     * `.com.google.android.horologist.data.OwnAppConfig own_app = 1;`
     * @return Whether the ownApp field is set.
     */
    public fun hasOwnApp(): kotlin.Boolean {
      return _builder.hasOwnApp()
    }

    /**
     * `.com.google.android.horologist.data.CompanionConfig companion = 2;`
     */
    public var companion: com.google.android.horologist.data.CompanionConfig
      @JvmName("getCompanion")
      get() = _builder.companion
      @JvmName("setCompanion")
      set(value) {
        _builder.companion = value
      }
    /**
     * `.com.google.android.horologist.data.CompanionConfig companion = 2;`
     */
    public fun clearCompanion() {
      _builder.clearCompanion()
    }
    /**
     * `.com.google.android.horologist.data.CompanionConfig companion = 2;`
     * @return Whether the companion field is set.
     */
    public fun hasCompanion(): kotlin.Boolean {
      return _builder.hasCompanion()
    }

    /**
     * `.com.google.android.horologist.data.ActivityConfig activity = 3;`
     */
    public var activity: com.google.android.horologist.data.ActivityConfig
      @JvmName("getActivity")
      get() = _builder.activity
      @JvmName("setActivity")
      set(value) {
        _builder.activity = value
      }
    /**
     * `.com.google.android.horologist.data.ActivityConfig activity = 3;`
     */
    public fun clearActivity() {
      _builder.clearActivity()
    }
    /**
     * `.com.google.android.horologist.data.ActivityConfig activity = 3;`
     * @return Whether the activity field is set.
     */
    public fun hasActivity(): kotlin.Boolean {
      return _builder.hasActivity()
    }
    public val launchConfigCase: com.google.android.horologist.data.LaunchRequest.LaunchConfigCase
      @JvmName("getLaunchConfigCase")
      get() = _builder.launchConfigCase

    public fun clearLaunchConfig() {
      _builder.clearLaunchConfig()
    }
  }
}
public inline fun com.google.android.horologist.data.LaunchRequest.copy(block: `com.google.android.horologist.data`.LaunchRequestKt.Dsl.() -> kotlin.Unit): com.google.android.horologist.data.LaunchRequest =
  `com.google.android.horologist.data`.LaunchRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.google.android.horologist.data.LaunchRequestOrBuilder.ownAppOrNull: com.google.android.horologist.data.OwnAppConfig?
  get() = if (hasOwnApp()) getOwnApp() else null

public val com.google.android.horologist.data.LaunchRequestOrBuilder.companionOrNull: com.google.android.horologist.data.CompanionConfig?
  get() = if (hasCompanion()) getCompanion() else null

public val com.google.android.horologist.data.LaunchRequestOrBuilder.activityOrNull: com.google.android.horologist.data.ActivityConfig?
  get() = if (hasActivity()) getActivity() else null

