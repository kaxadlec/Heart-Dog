// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sample.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.google.android.horologist.data.proto;

@kotlin.jvm.JvmName("-initializecommand")
public inline fun command(block: com.google.android.horologist.data.proto.CommandKt.Dsl.() -> kotlin.Unit): com.google.android.horologist.data.proto.SampleProto.Command =
  com.google.android.horologist.data.proto.CommandKt.Dsl._create(com.google.android.horologist.data.proto.SampleProto.Command.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `com.google.android.horologist.data.proto.Command`
 */
public object CommandKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.google.android.horologist.data.proto.SampleProto.Command.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.google.android.horologist.data.proto.SampleProto.Command.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.google.android.horologist.data.proto.SampleProto.Command = _builder.build()

    /**
     * `string operation = 1;`
     */
    public var operation: kotlin.String
      @JvmName("getOperation")
      get() = _builder.operation
      @JvmName("setOperation")
      set(value) {
        _builder.operation = value
      }
    /**
     * `string operation = 1;`
     */
    public fun clearOperation() {
      _builder.clearOperation()
    }
  }
}
public inline fun com.google.android.horologist.data.proto.SampleProto.Command.copy(block: `com.google.android.horologist.data.proto`.CommandKt.Dsl.() -> kotlin.Unit): com.google.android.horologist.data.proto.SampleProto.Command =
  `com.google.android.horologist.data.proto`.CommandKt.Dsl._create(this.toBuilder()).apply { block() }._build()

